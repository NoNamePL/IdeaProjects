// Демонстрация низкоуровневого типа в действии
class LowGen<T>{
	T ob;
	
	// Передать конструктору ссылку на объект типа
	LowGen(T o) {
		ob = o;
	}
	
	// Возвратить ob
	T getOb() {
		return ob;
	}
}

// Использование низкоуровневого типа
class RawDemo {
	public static void main(String[] args) {
		
		// Создать объект LowGen для объектов Integer
		LowGen<Integer> iob = new LowGen<Integer>(88);
		
		// Создать объект LowGen для обхектов String
		LowGen<String> sob = new LowGen<String>("Текст сообщения");
		
		// создать низкоуровневого объект LowGen и предоставить ему значение Double
		LowGen raw = new LowGen(Double.valueOf(98.6));
		
		// Приведение здесь объязательно, потому что тип не известен
		double val = (Double) raw.getOb();
		System.out.println("Значение: " + val);
		
		// Использование низкоуровневого типа может стать
		// причиной генерации исключений во время выполнения
		// Вот несколько примеров
		
		// Следующее приведение вызывает ошибку во время выполнения
		// int i = (Integer) raw.getOb(); // Ошибка во время выполнения
		
		// Это присвоение обходит механизм безопасности типов
		sob = raw; // Номарльно, но потенциально неправильно
		// String str = sob.getOb(); // Ошибка во время выполения
		
		// Это присваивание обходит механизм безопасности типов
		raw = iob;
		// d = (Double) raw.getOb();
	}
}